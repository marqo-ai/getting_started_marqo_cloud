[
    {
        "text": "Marqo add documents API specification and parameters. \n\nQuery Parameter\tType\tDefault Value\tDescription\nrefresh\tBoolean\ttrue\tForces a refresh after adding documents. This makes the documents available for searching. If you are happy to wait for the system to refresh, you can set this to false for better performance.\ndevice\tString\tnull\tThe device used to index the documents. If device is not specified and CUDA devices are available to Marqo (see here for more info), Marqo will speed up the indexing process by using available CUDA devices. Otherwise, the CPU will be used. Options include cpu and cuda, cuda1, cuda2 etc. The cuda option tells Marqo to use any available cuda devices.\nnon_tensor_fields\tArray of Strings\t[]\tThe fields within these documents to not create tensors for. Tensor search cannot be performed on these fields in these documents; pre-filtering and lexical search are still viable.\nuse_existing_tensors\tBoolean\tfalse\tSetting this to true will get existing tensors for unchanged fields in documents that are indexed with an id. Note: Marqo analyses the field string for updates, so Marqo can't detect a change if a URL points to a different image.\nimage_download_headers\tDict\t{}\tA JSON-serialised, URL encoded dictionary of headers for image download. Can be used to authenticate the images for download.\nmappings\tDict\tnull\tA JSON-serialised, URL encoded dictionary to handle object fields in documents. Check mappings for more information. Mappings are required to create multimodal tensor combination fields - see here for more information\nmodel_auth\tDict\tnull\tA JSON-serialised, URL encoded dictionary that consists of authorisation details used by Marqo to download non-publicly available models. Check here for more information.",
        "_id": "add_documents_api_spec.txt"
    },
    {
        "text": "ANN Algorithm Parameter object\nThe ann_parameters object contains hyperparameters for the approximate nearest neighbour algorithm used for tensor storage within Marqo. The parameters are as follows:\n\nName\tType\tDefault value\tDescription\nspace_type\tString\tcosinesimil\tThe function used to measure the distance between two points in ANN (l1, l2, linf, or cosinesimil).\nparameters\tDict\t\"\"\tThe hyperparameters for the ANN method (which is always hnsw for Marqo).",
        "_id": "add_parameters.txt"
    },
    {
        "text": "Configuring usage limits\nLimits can be set to protect the resources of the machine Marqo is running on.\n\nConfiguration name\tDefault\tDescription\nMARQO_MAX_INDEX_FIELDS\tn/a\tMaximum number of fields allowed per index\nMARQO_MAX_DOC_BYTES\t100000\tMaximum document size allowed to be indexed\nMARQO_MAX_RETRIEVABLE_DOCS\tn/a\tMaximum number of documents allowed to be returned in a single request\nMARQO_MAX_NUMBER_OF_REPLICAS\t1\tMaximum number of replicas allowed when creating an index\nMARQO_MAX_CUDA_MODEL_MEMORY\t4\tMaximum CUDA memory usage (GB) for models in Marqo. For multi-GPU, this is the max memory for each GPU.\nMARQO_MAX_CPU_MODEL_MEMORY\t4\tMaximum RAM usage (GB) for models in Marqo.\nMARQO_MAX_VECTORISE_BATCH_SIZE\t16\tMaximum size of batch size to process in parallel (when, for example, adding documents ).\nExample\ndocker run --name marqo --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway \\\n    -e \"MARQO_MAX_INDEX_FIELDS=400\" \\\n    -e \"MARQO_MAX_DOC_BYTES=200000\" \\\n    -e \"MARQO_MAX_RETRIEVABLE_DOCS=600\" \\\n    -e \"MARQO_MAX_CUDA_MODEL_MEMORY=5\" \\\n    -e \"MARQO_MAX_NUMBER_OF_REPLICAS=2\" marqoai/marqo:latest",
        "_id": "configure_usage_limits.txt"
    },
    {
        "text": "How to make indexes in Marqo with custom models, this is useful for deploying finetuned or custom models. For more info look at [bring your own CLIP models](https://docs.marqo.ai/latest/Models-Reference/bring_your_own_model/#bring-your-own-clip-model)\n\nExample of a custom open CLIP model:\n```Python\n# create an index with your custom model\nsettings = {\n    \"index_defaults\": {\n        \"treat_urls_and_pointers_as_images\": True,\n        \"model\": 'generic-clip-test-model-1',\n        \"model_properties\": {\n            \"name\": \"ViT-B-32-quickgelu\",\n                \"dimensions\": 512,\n                \"url\": \"https://github.com/mlfoundations/open_clip/releases/download/v0.2-weights/vit_b_32-quickgelu-laion400m_avg-8a00ab3c.pt\",\n                \"type\": \"open_clip\",\n            },\n        \"normalize_embeddings\": True,\n    },\n}\nresponse = mq.create_index(\"my-own-clip\", settings_dict=settings)\n```",
        "_id": "custom_models_maeqo.txt"
    },
    {
        "text": "",
        "_id": "deleting_an_index.txt"
    },
    {
        "text": "Example of an index defaults object for creating an index in Marqo.\n{\n    \"index_defaults\": {\n        \"treat_urls_and_pointers_as_images\": false,\n        \"model\": \"hf/all_datasets_v4_MiniLM-L6\",\n        \"normalize_embeddings\": true,\n        \"text_preprocessing\": {\n            \"split_length\": 2,\n            \"split_overlap\": 0,\n            \"split_method\": \"sentence\"\n        },\n        \"image_preprocessing\": {\n            \"patch_method\": null\n        },\n        \"ann_parameters\" : {\n            \"space_type\": \"cosinesimil\",\n            \"parameters\": {\n                \"ef_construction\": 128,\n                \"m\": 16\n            }\n        }\n    },\n    \"number_of_shards\": 1,\n    \"number_of_replicas\": 0\n}",
        "_id": "example_index_defaults.txt"
    },
    {
        "text": "Get statistics abouts an index in Marqo with get_stats.\n```python\n>>> results = mq.index(\"my-first-index\").get_stats()\n>>> print(results)\n\n{\n  \"numberOfDocuments\": 2\n}\n```\n",
        "_id": "getting_index_stats.txt"
    },
    {
        "text": "HNSW Method Parameters Object\nparameters can have the following values:\n\nName\tType\tDefault value\tDescription\nef_construction\tint\t128\tThe size of the dynamic list used during k-NN graph creation. Higher values lead to a more accurate graph but slower indexing speed. It is recommended to keep this between 2 and 800 (maximum is 4096)\nm\tint\t16\tThe number of bidirectional links that the plugin creates for each new element. Increasing and decreasing this value can have a large impact on memory consumption. Keep this value between 2 and 100.",
        "_id": "HNSW_method_parameters.txt"
    },
    {
        "text": "List all indexes in Marqo using Python\n\n```Python\nmq.get_indexes()\n```\n",
        "_id": "list_indexes.txt"
    },
    {
        "text": "Marqo comes with configurations for a plethora of open source models out of the box. For more info go to our documentation on [dense retrieval models](https://docs.marqo.ai/latest/Models-Reference/dense_retrieval/).\n\nExample of creating an index with a text embedding model:\n```Python\n# Import Marqo and create a client\nsettings = {\n    \"index_defaults\": {\n        \"treat_urls_and_pointers_as_images\": False,\n        \"model\": \"hf/e5-large\",\n        \"normalize_embeddings\": True,\n    },\n}\nresponse = mq.create_index(\"my-index\", settings_dict=settings)\n```\n\nExample of creating an index with a multimodal CLIP model:\n```Python\nsettings = {\n    \"index_defaults\": {\n        \"treat_urls_and_pointers_as_images\": True,\n        \"model\": \"open_clip/ViT-H-14/laion2b_s32b_b79k\",\n        \"normalize_embeddings\": True,\n    },\n}\nresponse = mq.create_index(\"my-index\", settings_dict=settings)\n```",
        "_id": "loading_other_models.txt"
    },
    {
        "text": "Example of adding documents with Marqo Python client:\n\n```Python\nimport marqo\n\nmq = marqo.Client(url='http://localhost:8882')\n\nmq.create_index(\"my-first-index\")\n\nmq.index(\"my-first-index\").add_documents([\n    {\n        \"Title\": \"The Travels of Marco Polo\",\n        \"Description\": \"A 13th-century travelogue describing Polo's travels\"\n    }, \n    {\n        \"Title\": \"Extravehicular Mobility Unit (EMU)\",\n        \"Description\": \"The EMU is a spacesuit that provides environmental protection, \"\n                       \"mobility, life support, and communications for astronauts\",\n        \"_id\": \"article_591\"\n    }]\n)\n```",
        "_id": "marqo_add_docs.txt"
    },
    {
        "text": "Marqo Configuring of usage limits\nLimits can be set to protect the resources of the machine Marqo is running on.\n\nConfiguration name\tDefault\tDescription\nMARQO_MAX_INDEX_FIELDS\tn/a\tMaximum number of fields allowed per index\nMARQO_MAX_DOC_BYTES\t100000\tMaximum document size allowed to be indexed\nMARQO_MAX_RETRIEVABLE_DOCS\tn/a\tMaximum number of documents allowed to be returned in a single request\nMARQO_MAX_NUMBER_OF_REPLICAS\t1\tMaximum number of replicas allowed when creating an index\nMARQO_MAX_CUDA_MODEL_MEMORY\t4\tMaximum CUDA memory usage (GB) for models in Marqo. For multi-GPU, this is the max memory for each GPU.\nMARQO_MAX_CPU_MODEL_MEMORY\t4\tMaximum RAM usage (GB) for models in Marqo.\nMARQO_MAX_VECTORISE_BATCH_SIZE\t16\tMaximum size of batch size to process in parallel (when, for example, adding documents ).",
        "_id": "marqo_configuration.txt"
    },
    {
        "text": "",
        "_id": "marqo_search_context.txt"
    },
    {
        "text": "Example of searching an index with the Marqo Python client:\n\n```Python\nimport marqo\n\nmq = marqo.Client(url='http://localhost:8882')\n\nresults = mq.index(\"my-first-index\").search(\n    q=\"What is the best outfit to wear on the moon?\"\n)\n```",
        "_id": "marqo_search_documents.txt"
    },
    {
        "text": "Creating and searching indexes with multimodal combination fields\nMarqo lets you have indexes with multimodal combination fields. Multimodal combination fields can combine text and images into one field. This allows scoring of documents across the combined text and image fields together. It also allows for a single vector representation instead of needing many which saves on storage. The relative weighting of each component can be set per document.\n\nThe example below demonstrates this with retrieval of caption and image pairs using multiple types of queries.\n\n\n```Python\nimport marqo\nimport pprint\n\nmq = marqo.Client(url=\"http://localhost:8882\")\n\nsettings = {\"treat_urls_and_pointers_as_images\": True, \"model\": \"ViT-L/14\"}\n\nmq.create_index(\"my-first-multimodal-index\", **settings)\n\nmq.index(\"my-first-multimodal-index\").add_documents(\n    [\n        {\n            \"Title\": \"Flying Plane\",\n            \"captioned_image\": {\n                \"caption\": \"An image of a passenger plane flying in front of the moon.\",\n                \"image\": \"https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg\",\n            },\n        },\n        {\n            \"Title\": \"Red Bus\",\n            \"captioned_image\": {\n                \"caption\": \"A red double decker London bus traveling to Aldwych\",\n                \"image\": \"https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg\",\n            },\n        },\n        {\n            \"Title\": \"Horse Jumping\",\n            \"captioned_image\": {\n                \"caption\": \"A person riding a horse over a jump in a competition.\",\n                \"image\": \"https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image1.jpg\",\n            },\n        },\n    ],\n    # Create the mappings, here we define our captioned_image mapping \n    # which weights the image more heavily than the caption - these pairs \n    # will be represented by a single vector in the index\n    mappings={\n        \"captioned_image\": {\n            \"type\": \"multimodal_combination\",\n            \"weights\": {\n                \"caption\": 0.3,\n                \"image\": 0.7,\n            },\n        }\n    },\n)\n\n# Search this index with a simple text query\nresults = mq.index(\"my-first-multimodal-index\").search(\n    q=\"Give me some images of vehicles and modes of transport. I am especially interested in air travel and commercial aeroplanes.\",\n    searchable_attributes=[\"captioned_image\"],\n)\n\nprint(\"Query 1:\")\npprint.pprint(results)\n\n# search the index with a query that uses weighted components\nresults = mq.index(\"my-first-multimodal-index\").search(\n    q={\n        \"What are some vehicles and modes of transport?\": 1.0,\n        \"Aeroplanes and other things that fly\": -1.0,\n    },\n    searchable_attributes=[\"captioned_image\"],\n)\nprint(\"\\nQuery 2:\")\npprint.pprint(results)\n\nresults = mq.index(\"my-first-multimodal-index\").search(\n    q={\"Animals of the Perissodactyla order\": -1.0},\n    searchable_attributes=[\"captioned_image\"],\n)\nprint(\"\\nQuery 3:\")\npprint.pprint(results)\n```",
        "_id": "multimodal_combination_fields.txt"
    },
    {
        "text": "M series Mac users\nMarqo does not yet support the docker-in-docker backend configuration for the arm64 architecture. This means that if you have an M series Mac, you will also need to run marqo's backend, marqo-os, locally.\n\nTo run Marqo on an M series Mac, follow the next steps.\n\nIn one terminal run the following command to start opensearch:\n\ndocker rm -f marqo-os; docker run -p 9200:9200 -p 9600:9600 -e \"discovery.type=single-node\" marqoai/marqo-os:0.0.3-arm\nIn another terminal run the following command to launch Marqo:\n\ndocker rm -f marqo; docker run --name marqo --privileged \\\n    -p 8882:8882 --add-host host.docker.internal:host-gateway \\\n    -e \"OPENSEARCH_URL=https://localhost:9200\" \\\n    marqoai/marqo:latest",
        "_id": "m_series_mac_start.txt"
    },
    {
        "text": "Score modifier example for marqo search function.\nParameter: score_modifiers\n\nExpected value: Check the following examples.\n\n# A score modifiers with 2 multiply fields and 2 add fields with provided weights.\n# You can add more fields if needed.\n{\n\"multiply_score_by\":\n    [{\"field_name\": \"my_multiply_field_1\",\"weight\": 1,},\n     {\"field_name\": \"my_multiply_field_2\", \"weight\" : 2}], \n\"add_to_score\": \n    [{\"field_name\": \"my_add_field_1\", \"weight\" : 3,},\n    {\"field_name\": \"my_dd_field_2\", \"weight\": 4,}] \n }",
        "_id": "score_modifier_example.txt"
    },
    {
        "text": "Marqo search API parameters.\n\nSearch Parameter\tType\tDefault value\tDescription\nq\tString OR Dict\t\"\"\tQuery string, or weighted query strings (if Dict)\nlimit\tInteger\t20\tMaximum number of document chunks to be returned\noffset\tInteger\t0\tNumber of documents to skip (used for pagination)\nfilter\tString\tnull\tFilter string in the Marqo DSL Language\nsearchableAttributes\tArray of strings\t[\"*\"]\tAttributes to display in the returned documents\nshowHighlights\tBoolean\ttrue\tReturn highlights for the document match\nsearchMethod\tString\t\"TENSOR\"\tThe search method, can be LEXICAL or TENSOR\nattributesToRetrieve\tArray of strings\t[\"*\"]\tAttributes to return in the search response\nreRanker\tString\tnull\tMethod to use for reranking results\nboost\tDict\tnull\tDictionary of attribute (string): 2-Array [weight (float), bias (float)]\nimage_download_headers\tDict\t{}\tHeaders for the image download. Can be used to authenticate the images for download.\ncontext\tDict\tnull\tDictionary of \"tensor\":{List[{\"vector\": List[floats], \"weight\": (float)}]} to bring your own vectors into search.\nscoreModifiers\tDict\tnull\tA dictionary to modify the score based on field values. Check here for examples.\nmodelAuth\tDict\tnull\tAuthorisation details used by Marqo to download non-publicly available models. Check here for examples.",
        "_id": "search_api_spec.txt"
    },
    {
        "text": "Marqo can be started locally with a docker image using the following commands:\n\n```\ndocker pull marqoai/marqo:latest\ndocker rm -f marqo\ndocker run --name marqo -it --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway marqoai/marqo:latest\n```",
        "_id": "starting_marqo_on_docker.txt"
    },
    {
        "text": "Text Preprocessing Object\nThe text_preprocessing object contains the specifics of how you want the index to preprocess text. The parameters are as follows:\n\nName\tType\tDefault value\tDescription\nsplit_length\tInteger\t2\tThe length of the chunks after splitting by split_method\nsplit_overlap\tInteger\t0\tThe length of overlap between adjacent chunks\nsplit_method\tString\tsentence\tThe method by which text is chunked (character, word, sentence, or passage)",
        "_id": "text_preprocessing.txt"
    },
    {
        "text": "Using Marqo within Docker (recommended)\nCurrently, only CUDA based (Nvidia) GPU's are supported. If you have a GPU on the host machine and want to use it with Marqo, there are two things to do;\n\nInstall nvidia-docker2.\nAdd a --gpus all flag to the Docker run command. Note that this flag should appear after the run command but before the end. See the full Docker command in step 2 below.\nDetailed instructions\nInstall nvidia-docker2 which is required for the GPU to work with Docker. The three steps below will install it for a Ubuntu based machine (refer to the original instructions for more details);\ndistribution=$(. /etc/os-release;echo $ID$VERSION_ID) \\\n      && curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \\\n      && curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \\\n            sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \\\n            sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list\n\nsudo apt-get update\nsudo apt-get install -y nvidia-docker2\nOnce nvidia-docker2 is installed, a simple modification to the Docker command is all that is needed. This is achieved by adding a --gpus all flag to the docker run command. For example, the Docker command would become,\n\ndocker run --name marqo --gpus all --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway marqoai/marqo:latest\nnote the --gpus all has been added.",
        "_id": "using_marqo_gpu.txt"
    },
    {
        "text": "Searching using weights in queries\nQueries can also be provided as dictionaries where each key is a query and their corresponding values are weights. This allows for more advanced queries consisting of multiple components with weightings towards or against them, queries can have negations via negative weighting.\n\nThe example below shows the application of this to a scenario where a user may want to ask a question but also negate results that match a certain semantic criterion.\n\n\n```Python\nimport marqo\nimport pprint\n\nmq = marqo.Client(url=\"http://localhost:8882\")\nmq.create_index(\"my-weighted-query-index\")\n\nmq.index(\"my-weighted-query-index\").add_documents(\n    [\n        {\n            \"Title\": \"Smartphone\",\n            \"Description\": \"A smartphone is a portable computer device that combines mobile telephone \"\n            \"functions and computing functions into one unit.\",\n        },\n        {\n            \"Title\": \"Telephone\",\n            \"Description\": \"A telephone is a telecommunications device that permits two or more users to\"\n            \"conduct a conversation when they are too far apart to be easily heard directly.\",\n        },\n        {\n            \"Title\": \"Thylacine\",\n            \"Description\": \"The thylacine, also commonly known as the Tasmanian tiger or Tasmanian wolf, \"\n            \"is an extinct carnivorous marsupial.\"\n            \"The last known of its species died in 1936.\",\n        },\n    ]\n)\n\n# initially we ask for a type of communications device which is popular in the 21st century\nquery = {\n    # a weighting of 1.1 gives this query slightly more importance\n    \"I need to buy a communications device, what should I get?\": 1.1,\n    # a weighting of 1 gives this query a neutral importance\n    \"Technology that became prevelant in the 21st century\": 1.0,\n}\n\nresults = mq.index(\"my-weighted-query-index\").search(\n    q=query, searchable_attributes=[\"Title\", \"Description\"]\n)\n\nprint(\"Query 1:\")\npprint.pprint(results)\n\n# now we ask for a type of communications which predates the 21st century\nquery = {\n    # a weighting of 1 gives this query a neutral importance\n    \"I need to buy a communications device, what should I get?\": 1.0,\n    # a weighting of -1 gives this query a negation effect\n    \"Technology that became prevelant in the 21st century\": -1.0,\n}\n\nresults = mq.index(\"my-weighted-query-index\").search(\n    q=query, searchable_attributes=[\"Title\", \"Description\"]\n)\n\nprint(\"\\nQuery 2:\")\npprint.pprint(results)\n```",
        "_id": "weighted_queries.txt"
    }
]